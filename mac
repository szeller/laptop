#!/usr/bin/env bash

# Ask for the administrator password upfront
sudo -v
### end common-components/bash-shebang

# Welcome to the laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}

less_fancy_echo() {
  printf "%b\n" "$1"
}

function pause(){
   read -p "$*"
}
### end common-components/shared-functions

DULL=0
BRIGHT=1

FG_BLACK=30
FG_RED=31
FG_GREEN=32
FG_YELLOW=33
FG_BLUE=34
FG_VIOLET=35
FG_CYAN=36
FG_WHITE=37

FG_NULL=00

BG_BLACK=40
BG_RED=41
BG_GREEN=42
BG_YELLOW=43
BG_BLUE=44
BG_VIOLET=45
BG_CYAN=46
BG_WHITE=47

BG_NULL=00

##
# ANSI Escape Commands
##
ESC="\033"
NORMAL="$ESC[m"
RESET="$ESC[${DULL};${FG_WHITE};${BG_NULL}m"

BLACK="$ESC[${DULL};${FG_BLACK}m"
RED="$ESC[${DULL};${FG_RED}m"
GREEN="$ESC[${DULL};${FG_GREEN}m"
YELLOW="$ESC[${DULL};${FG_YELLOW}m"
BLUE="$ESC[${DULL};${FG_BLUE}m"
VIOLET="$ESC[${DULL};${FG_VIOLET}m"
CYAN="$ESC[${DULL};${FG_CYAN}m"
WHITE="$ESC[${DULL};${FG_WHITE}m"

# BRIGHT TEXT
BRIGHT_BLACK="$ESC[${BRIGHT};${FG_BLACK}m"
BRIGHT_RED="$ESC[${BRIGHT};${FG_RED}m"
BRIGHT_GREEN="$ESC[${BRIGHT};${FG_GREEN}m"
BRIGHT_YELLOW="$ESC[${BRIGHT};${FG_YELLOW}m"
BRIGHT_BLUE="$ESC[${BRIGHT};${FG_BLUE}m"
BRIGHT_VIOLET="$ESC[${BRIGHT};${FG_VIOLET}m"
BRIGHT_CYAN="$ESC[${BRIGHT};${FG_CYAN}m"
BRIGHT_WHITE="$ESC[${BRIGHT};${FG_WHITE}m"
### end common-components/colours

fancy_echo "Initialize SSH ..."
  if [ ! -d ~/.ssh/ ]; then
    ssh-keygen -f ~/.ssh/id_rsa -t rsa -N ''
  fi
### end common-components/ssh

start_if_needed() {
  local grep_name="[${1:0:1}]${1:1}"

  if [[ -z $(ps aux | grep -e "${grep_name}") ]]; then
    if [ -e ~/Applications/$1.app ]; then
      open ~/Applications/$1.app
    else
      if [ -e /Applications/$1.app ]; then
        open /Applications/$1.app
      fi
    fi
  fi

  true
}
### end mac-components/shared-functions

fancy_echo "Setting OSX settings ..."

  # General UI/UX
  #

  # Disable the sound effects on boot
  sudo nvram SystemAudioVolume=%80

  # Expand save panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

  # Save to disk (not to iCloud) by default
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  # Disable the “Are you sure you want to open this application?” dialog
  defaults write com.apple.LaunchServices LSQuarantine -bool false

  ###############################################################################
  # Screen                                                                      #
  ###############################################################################

  # Require password immediately after sleep or screen saver begins
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 0

  # Save screenshots to the desktop
  defaults write com.apple.screencapture location -string "${HOME}/Desktop"

  # Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
  defaults write com.apple.screencapture type -string "png"

  # Disable shadow in screenshots
  defaults write com.apple.screencapture disable-shadow -bool true

  # Enable subpixel font rendering on non-Apple LCDs
  # defaults write NSGlobalDomain AppleFontSmoothing -int 2

  # Enable HiDPI display modes (requires restart)
  # sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

  # Dock
  #

  # Remove the auto-hiding Dock delay
  defaults write com.apple.dock autohide-delay -float 0
  # Reduce the animation when hiding/showing the Dock
  defaults write com.apple.dock autohide-time-modifier -float 0.15

  # Automatically hide and show the Dock
  defaults write com.apple.dock autohide -bool true

  # Make Dock icons of hidden applications translucent
  # defaults write com.apple.dock showhidden -bool true

  # Make Dock more transparent
  # defaults write com.apple.dock hide-mirror -bool true



  ###############################################################################
  # Finder                                                                      #
  ###############################################################################

  # Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons
  # defaults write com.apple.finder QuitMenuItem -bool true

  # Finder: disable window animations and Get Info animations
  # defaults write com.apple.finder DisableAllAnimations -bool true

  # Set Desktop as the default location for new Finder windows
  # For other paths, use `PfLo` and `file:///full/path/here/`
  defaults write com.apple.finder NewWindowTarget -string "PfDe"
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"

  # Show icons for hard drives, servers, and removable media on the desktop
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

  # Finder: show hidden files by default
  #defaults write com.apple.finder AppleShowAllFiles -bool true

  # Finder: show all filename extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  # Finder: show status bar
  defaults write com.apple.finder ShowStatusBar -bool true

  # Finder: show path bar
  defaults write com.apple.finder ShowPathbar -bool true

  # Finder: allow text selection in Quick Look
  defaults write com.apple.finder QLEnableTextSelection -bool true

  # Display full POSIX path as Finder window title
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

  # When performing a search, search the current folder by default
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

  # Disable the warning when changing a file extension
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Enable spring loading for directories
  defaults write NSGlobalDomain com.apple.springing.enabled -bool true

  # Remove the spring loading delay for directories
  # defaults write NSGlobalDomain com.apple.springing.delay -float 0

  # Avoid creating .DS_Store files on network volumes
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

  # Disable disk image verification
  # defaults write com.apple.frameworks.diskimages skip-verify -bool true
  # defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
  # defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

  # Automatically open a new Finder window when a volume is mounted
  defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
  defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
  defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true

  # Use list view in all Finder windows by default
  # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
  defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

  # Disable the warning before emptying the Trash
  defaults write com.apple.finder WarnOnEmptyTrash -bool false

  # Empty Trash securely by default
  defaults write com.apple.finder EmptyTrashSecurely -bool true

  # Enable AirDrop over Ethernet and on unsupported Macs running Lion
  defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

  # Enable the MacBook Air SuperDrive on any Mac
  # sudo nvram boot-args="mbasd=1"

  # Show the ~/Library folder
  chflags nohidden ~/Library

  # Remove Dropbox’s green checkmark icons in Finder
  # file=/Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns
  # [ -e "${file}" ] && mv -f "${file}" "${file}.bak"

  # Expand the following File Info panes:
  # “General”, “Open with”, and “Sharing & Permissions”
  defaults write com.apple.finder FXInfoPanesExpanded -dict \
    General -bool true \
    OpenWith -bool true \
    Privileges -bool true


  # Time Machine
  #

  # Prevent Time Machine from prompting to use new hard drives as backup volume
  defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

  # Menu bar: hide the Time Machine, Volume, and User icons
  for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
    defaults write "${domain}" dontAutoLoad -array \
      "/System/Library/CoreServices/Menu Extras/TimeMachine.menu" \
      "/System/Library/CoreServices/Menu Extras/User.menu" \
      "/System/Library/CoreServices/Menu Extras/Battery.menu" \
      "/System/Library/CoreServices/Menu Extras/Clock.menu"
  done

  defaults write com.apple.systemuiserver menuExtras -array \
    "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" \
    "/System/Library/CoreServices/Menu Extras/AirPort.menu"


  ###############################################################################
  # Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
  ###############################################################################

  # Trackpad: enable tap to click for this user and for the login screen
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  # Disable “natural” (Lion-style) scrolling
  defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

  # Increase sound quality for Bluetooth headphones/headsets
  defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

  # Use scroll gesture with the Ctrl (^) modifier key to zoom
  defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
  defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144
  # Follow the keyboard focus while zoomed in
  defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

  # Disable press-and-hold for keys in favor of key repeat
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

  # Set a blazingly fast keyboard repeat rate
  defaults write NSGlobalDomain KeyRepeat -int 0


less_fancy_echo "Restarting affected apps, some of these changes require a logout/restart ..."

  for app in "cfprefsd" "Finder" "SystemUIServer"; do
    killall "${app}" > /dev/null 2>&1
  done
### end mac-components/osx

fancy_echo "Installing XCode ..."
  if [ ! $(xcode-select -p)='/Library/Developer/CommandLineTools' ]; then
    less_fancy_echo "${BRIGHT_RED}You must manually install Xcode${RESET}"
    less_fancy_echo 'try these commands'
    less_fancy_echo '$ sudo xcodebuild -license'
    less_fancy_echo '$ xcode-select --install'
    less_fancy_echo ''
    pause 'Press [Enter] key after Xcode has been installed'
  else
    less_fancy_echo '... skipping, looks like XCode is installed'
  fi
### end mac-components/xcode

if ! which brew &>/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

brew_install() {
  if brew list -1 | grep -q "^$1"; then
    less_fancy_echo "... skipping $1, already installed"
  else
    brew install $1
  fi

  true
}

brew_uninstall() {
  if brew list -1 | grep -q "^$1"; then
    brew uninstall $1
  else
    less_fancy_echo "... skip removing $1, not installed"
  fi

  true
}

brew_install_or_upgrade() {
  if brew list -1 | grep -q "^$1"; then
    if brew outdated -q | grep -q "^$1"; then
      brew upgrade $1
    else
      less_fancy_echo "... skipping $1, already installed and current"
    fi
  else
    brew install $1
  fi

  true
}

brew_start() {
  if [[ -n $(brew services list) ]]; then
    if brew services list | grep "^$1.*started"; then
      less_fancy_echo "... skip $1, already starting"
    else
      brew services start $1
    fi
  fi

  true
}

brew_tap() {
  if brew tap | grep -q "^$1"; then
    less_fancy_echo "... skip $1, already tapped"
  else
    brew tap $1
  fi

  true
}

brew_migrate_or_add_tap() {
  if is_brew_tap_installed $1; then
    less_fancy_echo "... migrating taps $1 -> $2"
    brew untap $1
    brew tap $2
  else
    brew_tap $2
  fi

  true
}

brew_tap_list() {
  brew tap 2> /dev/null || true
}

TAPS=$(brew_tap_list)

is_brew_tap_installed() {
  echo ${TAPS} | grep -q "\b$1"
}
### end mac-components/homebrew

fancy_echo "Installing Git, thee version control system ..."
  brew_install git

fancy_echo "Installing GitHub CLI client ..."
  brew_install hub

git_clone() {
  if [ ! -d $2 ]; then
    git clone $1 $2
  else
    less_fancy_echo "... skip cloning $1, already cloned"
  fi

  true
}
### end mac-components/git


fancy_echo "Installing Redis, a good key-value database ..."
  brew_install redis

fancy_echo "Installing tmux, to save project state and switch between projects ..."
  brew_install tmux

fancy_echo "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
  brew_install reattach-to-user-namespace

fancy_echo "Installing Bash Completion, for better bash completion ..."
  brew_install bash-completion

fancy_echo "Installing tig, text-mode interface to git..."
  brew_install tig

fancy_echo "Installing tig, text-mode interface to git..."
  brew_install tig

fancy_echo "Installing curl"
  brew_install curl

fancy_echo "Installing python"
  brew_install python

fancy_echo "Installing ruby"
  brew_install ruby

fancy_echo "Installing nvm"
  brew_install nvm

fancy_echo "Installing awscli"
  brew_install awscli

fancy_echo "Installing unrar"
  brew_install unrar

fancy_echo "Installing gnupg"
  brew_install gnupg

### end mac-components/packages

fancy_echo "Installing Brew Cask, to install OSX binaries ..."
  brew_install_or_upgrade caskroom/cask/brew-cask
  brew_tap caskroom/versions

brew_cask_list() {
  brew cask list 2> /dev/null || true
}

# run this once, the command is slow
CASKS=$(brew_cask_list)

brew_cask_install() {
  if is_brew_cask_installed $1; then
    less_fancy_echo "... skipping cask $1, already installed"
  else
    brew cask install $1 2> /dev/null || true
  fi

  true
}

is_brew_cask_installed() {
  echo ${CASKS} | grep -q "\b$1"
}

brew_cask_link() {
  if brew cask $1 status | grep -q 'happily linked'; then
    less_fancy_echo "... skip linking $1, already linked"
  else
    brew cask $1 link
  fi
}

# fancy_echo "Installing Launchbar, because it rocks ..."
#   brew_cask_install launchbar

# fancy_echo "Installing Google Chrome, you know you want it ..."
#   brew_cask_install google-chrome

# fancy_echo "Installing Firefox, you know you want it too ..."
#   brew_cask_install firefox

# fancy_echo "Installing Dropbox, for sharing files ..."
#   brew_cask_install dropbox

fancy_echo "Installing Google Drive, for sharing more files ..."
  brew_cask_install google-drive

fancy_echo "Installing Github, in case you forget about 'git add -p' ..."
  brew_cask_install github

fancy_echo "Installing istat menus since it rocks ..."
  brew_cask_install istat-menus

fancy_echo "Installing F-lux, to save your eyes ..."
  brew_cask_install flux

# fancy_echo "Installing SimpleComic for something to do while you are compiling ..."
#   brew_cask_install simple-comic

fancy_echo "Installing iTerm2, almost forgot ..."
  brew_cask_install iterm2
  # set up file extension associations, for auto-installing themes
  start_if_needed iTerm

fancy_echo "Installing Adium for everything not in slack ..."
  brew_cask_install adium

fancy_echo "Installing skype, not sure why"
  brew_cask_install skype

fancy_echo "Installing CCC"
  brew_cask_install carbon-copy-cloner

fancy_echo "Installing handbrake"
  brew_cask_install handbrake

fancy_echo "Installing kaleidoscope"
  brew_cask_install kaleidoscope

fancy_echo "Installing viscosity"
  brew_cask_install viscosity

fancy_echo "Installing vlc"
  brew_cask_install vlc

fancy_echo "Installing java6 for backwards compat"
  brew_cask_install java6

fancy_echo "Installing java8"
  brew_cask_install java

### end mac-components/casks

fancy_echo "Tapping Brew Cask Fonts, to allow easy install of fonts ..."
  brew_tap caskroom/fonts

fancy_echo "Installing Font anonymous-pro"
  brew_cask_install font-inconsolata-dz

fancy_echo "Installing Font inconsolata-dz, ohhh, pretty ..."
  brew_cask_install font-anonymous-pro

fancy_echo "Installing Font source-code-pro, not bad ..."
  brew_cask_install font-source-code-pro

fancy_echo "Installing Font source-sans-pro, not bad ..."
  brew_cask_install font-source-sans-pro
### end mac-components/fonts

fancy_echo "Installing wget, because sometimes you need a little wget ..."
  brew_install wget

# fancy_echo "Installing ShiftIt (onsi fork), for better window management ..."
# if [ ! -d /Applications/ShiftIt.app ]; then
#     wget https://raw.github.com/onsi/ShiftIt/master/ShiftIt.zip
#     unzip -q ShiftIt.zip
#     rm ShiftIt.zip
#     mv ShiftIt.app /Applications/
# fi

fancy_echo "Downloading Solarized, for iTerm colours ..."
  if [ ! -d ~/Applications/solarized ]; then
    wget http://ethanschoonover.com/solarized/files/solarized.zip
    unzip -q solarized.zip
    rm solarized.zip
    mv solarized ~/Applications/
  fi

fancy_echo "Installing Solarized Dark Theme for Terminal ..."
  if [ -s ~/Library/Preferences/com.apple.Terminal.plist ]; then
    if grep -q 'Solarized Dark' ~/Library/Preferences/com.apple.Terminal.plist; then
      echo "... skipping theme install, already installed"
    else
      open ~/Applications/solarized/osx-terminal.app-colors-solarized/Solarized\ Dark\ ansi.terminal
      sleep 1
      defaults write com.apple.terminal "Default Window Settings" -string "Solarized Dark ansi"
      defaults write com.apple.terminal "Startup Window Settings" -string "Solarized Dark ansi"
    fi
  else
    echo "... skipping theme install, Terminal not installed"
  fi

fancy_echo "Installing Solarized Dark Theme for iTerm ..."
  if [ -s ~/Library/Preferences/com.googlecode.iterm2.plist ]; then
    if grep -q 'Solarized Dark' ~/Library/Preferences/com.googlecode.iterm2.plist; then
      echo "... skipping theme install, already installed"
    else
      open ~/Applications/solarized/iterm2-colors-solarized/Solarized\ Dark.itermcolors
      open ~/Applications/solarized/iterm2-colors-solarized/Solarized\ Light.itermcolors
    fi
  else
    echo "... skipping theme install, iTerm 2 not installed"
  fi
### end mac-components/downloads

fancy_echo "Installing Heroku CLI client ..."
  brew_install heroku-toolbelt

fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
  heroku plugins:install git://github.com/ddollar/heroku-config.git
### end mac-components/heroku

fancy_echo "Cleaning up Brew ..."
  brew cleanup

fancy_echo "Cleaning up Brew Cask ..."
  brew cask cleanup
### end mac-components/cleanup

fancy_echo "Installing your shared additions from ~/.laptop.shared ..."
  if [[ -f ~/.laptop.shared ]]; then
    source ~/.laptop.shared
  fi

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi
### end common-components/personal-additions

less_fancy_echo ""
less_fancy_echo " ${GREEN}******************"
less_fancy_echo "   TODO (manual)"
less_fancy_echo " ******************${RESET}"
less_fancy_echo ""
less_fancy_echo "   ${YELLOW}**** USING SYSTEM PREFERENCES${RESET}"
less_fancy_echo " - allow apps downloaded from Anywhere (see Security & Privacy > General)"
less_fancy_echo " - allow ShiftIt Accessibility access (see Security & Privacy > Privacy > Accessibility)"
less_fancy_echo " - map caps lock to ctrl (see Keyboard > Keyboard > Modifier Keys)"
less_fancy_echo " - hide date/time in menu bar (see Date & Time > Clock)"
less_fancy_echo ""
less_fancy_echo "   ${YELLOW}**** USING SPECIFIC APPS${RESET}"
less_fancy_echo " - use solarized for Terminal. Theme was installed, just make it default"
less_fancy_echo " - use solarized for iTerm2. Theme was installed, just apply it"
less_fancy_echo ""
### end mac-components/todo

